{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        },
        {
          "exec": "next build"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "dev": {
      "name": "dev",
      "description": "Starts the Next.js application in development mode",
      "steps": [
        {
          "exec": "next dev"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern pages test build-tools .projenrc.js"
        }
      ]
    },
    "export": {
      "name": "export",
      "description": "Exports the application for production deployment",
      "steps": [
        {
          "exec": "next export"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "postbuild": {
      "name": "postbuild",
      "steps": [
        {
          "exec": "next-sitemap"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "server": {
      "name": "server",
      "description": "Starts the Next.js application in production mode",
      "steps": [
        {
          "exec": "next start"
        }
      ]
    },
    "telemetry": {
      "name": "telemetry",
      "description": "Checks the status of Next.js telemetry collection",
      "steps": [
        {
          "exec": "next telemetry"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/jest @types/node @types/react @types/react-dom @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-next eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit json-schema next-sitemap npm-check-updates prettier ts-jest typescript @emotion/react @emotion/styled @mui/icons-material @mui/material next react react-dom"
        },
        {
          "exec": "npx projen"
        }
      ]
    },
    "upgrade-projen": {
      "name": "upgrade-projen",
      "description": "upgrade projen",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade projen"
        },
        {
          "exec": "npx projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
